package main

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	_ "github.com/go-sql-driver/mysql"
)

type member struct {
	id             int
	member_name    string
	password       string
	realname       string
	status         int
	balance        int
	locked_balance int
	registed_id    int
	group_id       int
	registed_time  string
	updated_time   string
}

var db *sql.DB
var err error

func main() {
	// DB
	db, err = sql.Open("mysql", "root:Happybonnie0713@tcp(127.0.0.1:3306)/test?charset=utf8")
	check(err)

	defer db.Close()

	db.SetMaxIdleConns(20)
	db.SetMaxOpenConns(20)

	err = db.Ping()
	check(err)

	// router
	router := gin.Default()
	router.GET("/", index)
	router.POST("/member", CreateMember)

	router.Run(":8080")
}

func index(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{
		"msg": "Hello World",
	})
}

func CreateMember(c *gin.Context) {
	member_name := c.Request.FormValue("member_name")
	password := c.Request.FormValue("password")
	realname := c.Request.FormValue("realname")
	status := 1      // default status
	balance := 0     // default balance
	registed_id := 0 // from registed model
	group_id := 0    // default groupid
	locked_balance := 0

	rs, err := db.Exec("INSERT INTO member (member_name, password, realname, status, balance, registed_id, group_id, locked_balance, registed_time, updated_time) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", member_name, password, realname, status, balance, registed_id, group_id, locked_balance, time.Now(), time.Now())
	check(err)

	id, err := rs.LastInsertId()
	msg := fmt.Sprintf("Hello New Member: %d Welcome", id)

	c.JSON(http.StatusOK, gin.H{
		"msg": msg,
	})

}

func check(err error) {
	if err != nil {
		log.Fatalln(err)
	}
}
